openapi: '3.0.3'
info:
  title: '8 API'
  version: '0.0.1'
paths:
  /api/auth/signup:
    post:
      summary: 'Create a new user'
      operationId: 'signup'
      security: []
      requestBody:
        description: 'User data to create'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        '200':
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
  /api/auth/login:
    post:
      summary: 'Login a user'
      operationId: 'login'
      security: []
      requestBody:
        description: 'User data to login'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: 'User logged in'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
  /api/auth/logout:
    post:
      summary: 'Logout a user'
      operationId: 'logout'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'User logged out'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
  /api/auth/deleteAccount:
    post:
      summary: 'Delete a user'
      operationId: 'deleteAccount'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'User deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
  /api/v1/me:
    get:
      summary: 'Get the current user'
      operationId: 'me'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'The current user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
  /api/v1/users:
    get:
      summary: 'Get a list of users'
      operationId: 'users'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'A list of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
  /api/v1/health:
    get:
      summary: 'Check the health of the API'
      operationId: 'health'
      security: []
      parameters:
        - name: 'awesome'
          in: 'query'
          description: 'A flag to indicate if the response should be awesome'
          required: false
          schema:
            type: 'boolean'
            example: true
      responses:
        '200':
          description: 'The API is healthy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
    post:
      summary: 'Submit health data'
      operationId: 'health'
      security: []
      requestBody:
        description: 'Health data to submit'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthStatusRequest'
      responses:
        '200':
          description: 'Health status updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
components:
  schemas:
    UserSignUpRequest:
      type: 'object'
      properties:
        email:
          type: 'string'
          example: 'tim@brightsidedeveloper.com'
        password:
          type: 'string'
          example: 'password'
      required:
        - 'email'
        - 'password'
    MeResponse:
      type: 'object'
      properties:
        id:
          type: 'string'
          example: '123'
        email:
          type: 'string'
          example: 'tim@brightsidedeveloper.com'
        createdAt:
          type: 'string'
          example: '??????'
      required:
        - 'id'
        - 'email'
        - 'createdAt'
    UsersResponse:
      type: 'object'
      properties:
        users:
          type: 'array'
          items:
            type: 'object'
            properties:
              id:
                type: 'string'
                example: '123'
              email:
                type: 'string'
                example: 'tim@bsd.com'
              createdAt:
                type: 'string'
                example: 30
            required:
              - 'id'
              - 'email'
              - 'createdAt'
    UserLoginRequest:
      type: 'object'
      properties:
        email:
          type: 'string'
          example: 'tim@brightsidedeveloper.com'
        password:
          type: 'string'
          example: 'password'
      required:
        - 'email'
        - 'password'
    UserAuthResponse:
      type: 'object'
      properties:
        token:
          type: 'string'
          example: '1234-1234-1234-1234'
    HealthStatusRequest:
      type: 'object'
      properties:
        health:
          type: 'integer'
          example: 85
          description: 'The health status value to submit'
      required:
        - 'health'
    HealthStatusResponse:
      type: 'object'
      properties:
        status:
          type: 'string'
          example: 'healthy'
      required:
        - 'status'
