/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const LayoutRouteLazyImport = createFileRoute('/_layout')()
const LayoutIndexLazyImport = createFileRoute('/_layout/')()
const LayoutTablesLazyImport = createFileRoute('/_layout/tables')()
const LayoutSchemasLazyImport = createFileRoute('/_layout/schemas')()
const LayoutS3LazyImport = createFileRoute('/_layout/s3')()
const LayoutMigrationsLazyImport = createFileRoute('/_layout/migrations')()
const LayoutApiLazyImport = createFileRoute('/_layout/api')()

// Create/Update Routes

const LayoutRouteLazyRoute = LayoutRouteLazyImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_layout/route.lazy').then((d) => d.Route))

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() => import('./routes/_layout/index.lazy').then((d) => d.Route))

const LayoutTablesLazyRoute = LayoutTablesLazyImport.update({
  id: '/tables',
  path: '/tables',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_layout/tables.lazy').then((d) => d.Route),
)

const LayoutSchemasLazyRoute = LayoutSchemasLazyImport.update({
  id: '/schemas',
  path: '/schemas',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_layout/schemas.lazy').then((d) => d.Route),
)

const LayoutS3LazyRoute = LayoutS3LazyImport.update({
  id: '/s3',
  path: '/s3',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() => import('./routes/_layout/s3.lazy').then((d) => d.Route))

const LayoutMigrationsLazyRoute = LayoutMigrationsLazyImport.update({
  id: '/migrations',
  path: '/migrations',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_layout/migrations.lazy').then((d) => d.Route),
)

const LayoutApiLazyRoute = LayoutApiLazyImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => LayoutRouteLazyRoute,
} as any).lazy(() => import('./routes/_layout/api.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/api': {
      id: '/_layout/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof LayoutApiLazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
    '/_layout/migrations': {
      id: '/_layout/migrations'
      path: '/migrations'
      fullPath: '/migrations'
      preLoaderRoute: typeof LayoutMigrationsLazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
    '/_layout/s3': {
      id: '/_layout/s3'
      path: '/s3'
      fullPath: '/s3'
      preLoaderRoute: typeof LayoutS3LazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
    '/_layout/schemas': {
      id: '/_layout/schemas'
      path: '/schemas'
      fullPath: '/schemas'
      preLoaderRoute: typeof LayoutSchemasLazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
    '/_layout/tables': {
      id: '/_layout/tables'
      path: '/tables'
      fullPath: '/tables'
      preLoaderRoute: typeof LayoutTablesLazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexLazyImport
      parentRoute: typeof LayoutRouteLazyImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteLazyRouteChildren {
  LayoutApiLazyRoute: typeof LayoutApiLazyRoute
  LayoutMigrationsLazyRoute: typeof LayoutMigrationsLazyRoute
  LayoutS3LazyRoute: typeof LayoutS3LazyRoute
  LayoutSchemasLazyRoute: typeof LayoutSchemasLazyRoute
  LayoutTablesLazyRoute: typeof LayoutTablesLazyRoute
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
}

const LayoutRouteLazyRouteChildren: LayoutRouteLazyRouteChildren = {
  LayoutApiLazyRoute: LayoutApiLazyRoute,
  LayoutMigrationsLazyRoute: LayoutMigrationsLazyRoute,
  LayoutS3LazyRoute: LayoutS3LazyRoute,
  LayoutSchemasLazyRoute: LayoutSchemasLazyRoute,
  LayoutTablesLazyRoute: LayoutTablesLazyRoute,
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
}

const LayoutRouteLazyRouteWithChildren = LayoutRouteLazyRoute._addFileChildren(
  LayoutRouteLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteLazyRouteWithChildren
  '/api': typeof LayoutApiLazyRoute
  '/migrations': typeof LayoutMigrationsLazyRoute
  '/s3': typeof LayoutS3LazyRoute
  '/schemas': typeof LayoutSchemasLazyRoute
  '/tables': typeof LayoutTablesLazyRoute
  '/': typeof LayoutIndexLazyRoute
}

export interface FileRoutesByTo {
  '/api': typeof LayoutApiLazyRoute
  '/migrations': typeof LayoutMigrationsLazyRoute
  '/s3': typeof LayoutS3LazyRoute
  '/schemas': typeof LayoutSchemasLazyRoute
  '/tables': typeof LayoutTablesLazyRoute
  '/': typeof LayoutIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteLazyRouteWithChildren
  '/_layout/api': typeof LayoutApiLazyRoute
  '/_layout/migrations': typeof LayoutMigrationsLazyRoute
  '/_layout/s3': typeof LayoutS3LazyRoute
  '/_layout/schemas': typeof LayoutSchemasLazyRoute
  '/_layout/tables': typeof LayoutTablesLazyRoute
  '/_layout/': typeof LayoutIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/api' | '/migrations' | '/s3' | '/schemas' | '/tables' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/api' | '/migrations' | '/s3' | '/schemas' | '/tables' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/api'
    | '/_layout/migrations'
    | '/_layout/s3'
    | '/_layout/schemas'
    | '/_layout/tables'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRouteLazyRoute: typeof LayoutRouteLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteLazyRoute: LayoutRouteLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout/route.lazy.tsx",
      "children": [
        "/_layout/api",
        "/_layout/migrations",
        "/_layout/s3",
        "/_layout/schemas",
        "/_layout/tables",
        "/_layout/"
      ]
    },
    "/_layout/api": {
      "filePath": "_layout/api.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/migrations": {
      "filePath": "_layout/migrations.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/s3": {
      "filePath": "_layout/s3.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/schemas": {
      "filePath": "_layout/schemas.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/tables": {
      "filePath": "_layout/tables.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.lazy.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
